
Graduation_PROJECT_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c7  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000545  00000000  00000000  000007b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000286  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000312  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001e  00000000  00000000  000012d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	5d 00       	.word	0x005d	; ????
  56:	5f 00       	.word	0x005f	; ????
  58:	61 00       	.word	0x0061	; ????
  5a:	63 00       	.word	0x0063	; ????
  5c:	65 00       	.word	0x0065	; ????
  5e:	6a 00       	.word	0x006a	; ????
  60:	6c 00       	.word	0x006c	; ????
  62:	6e 00       	.word	0x006e	; ????
  64:	70 00       	.word	0x0070	; ????
  66:	72 00       	.word	0x0072	; ????

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <SPI_SLAVE_INIT>:
	}
}

void SPI_SLAVE_INIT(void)
{
	DDRB|=(1<<7);
  80:	bf 9a       	sbi	0x17, 7	; 23
	DDRB&=~(1<<5);
  82:	bd 98       	cbi	0x17, 5	; 23
	DDRB&=~(1<<6);
  84:	be 98       	cbi	0x17, 6	; 23
	DDRB&=~(1<<8);
  86:	87 b3       	in	r24, 0x17	; 23
  88:	87 bb       	out	0x17, r24	; 23
	SPCR|=(1<<SPE);//(1<<SPR0)|
  8a:	6e 9a       	sbi	0x0d, 6	; 13
  8c:	08 95       	ret

0000008e <SPI_RETURN>:
	//sei();
}
char SPI_RETURN(void)
{
	while(!(SPSR&(1<<SPIF)));
  8e:	77 9b       	sbis	0x0e, 7	; 14
  90:	fe cf       	rjmp	.-4      	; 0x8e <SPI_RETURN>
	return SPDR;
  92:	8f b1       	in	r24, 0x0f	; 15
}
  94:	08 95       	ret

00000096 <main>:
#include <util/delay.h>
char SPI_RETURN(void);
void SPI_SLAVE_INIT(void);
int main(void)
{	//Output pins select
	DDRC|=(1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7);
  96:	84 b3       	in	r24, 0x14	; 20
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	84 bb       	out	0x14, r24	; 20
	SPI_SLAVE_INIT();
  9c:	0e 94 40 00 	call	0x80	; 0x80 <SPI_SLAVE_INIT>
	unsigned char recieved;
	while (1)
	{	
		recieved=SPI_RETURN();
  a0:	0e 94 47 00 	call	0x8e	; 0x8e <SPI_RETURN>
		switch(recieved)
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	fc 01       	movw	r30, r24
  a8:	e1 56       	subi	r30, 0x61	; 97
  aa:	f1 09       	sbc	r31, r1
  ac:	ea 30       	cpi	r30, 0x0A	; 10
  ae:	f1 05       	cpc	r31, r1
  b0:	b8 f7       	brcc	.-18     	; 0xa0 <main+0xa>
  b2:	e6 5d       	subi	r30, 0xD6	; 214
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	0c 94 76 00 	jmp	0xec	; 0xec <__tablejump2__>
		{
		case 'a':
			PORTC|=(1<<0);	//Led 0 room 1 is on
  ba:	a8 9a       	sbi	0x15, 0	; 21
			break;
  bc:	f1 cf       	rjmp	.-30     	; 0xa0 <main+0xa>
		case 'b':
			PORTC|=(1<<1);	//Led 1 room 1 is on
  be:	a9 9a       	sbi	0x15, 1	; 21
			break;
  c0:	ef cf       	rjmp	.-34     	; 0xa0 <main+0xa>
		case 'c':
			PORTC|=(1<<2);		//Led 0 room 2 is on
  c2:	aa 9a       	sbi	0x15, 2	; 21
			break;
  c4:	ed cf       	rjmp	.-38     	; 0xa0 <main+0xa>
		case 'd':
			PORTC|=(1<<3);		//Led 0 room 3 is on
  c6:	ab 9a       	sbi	0x15, 3	; 21
			break;
  c8:	eb cf       	rjmp	.-42     	; 0xa0 <main+0xa>
		case 'e':
			PORTC|=(1<<4)|(1<<6);	//Washing machine is on
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	80 65       	ori	r24, 0x50	; 80
  ce:	85 bb       	out	0x15, r24	; 21
			PORTC&=~(1<<5);
  d0:	ad 98       	cbi	0x15, 5	; 21
			break;
  d2:	e6 cf       	rjmp	.-52     	; 0xa0 <main+0xa>
		case 'f':
			PORTC&=~(1<<0);	//Led 0 room 1 is off
  d4:	a8 98       	cbi	0x15, 0	; 21
			break;
  d6:	e4 cf       	rjmp	.-56     	; 0xa0 <main+0xa>
		case 'g':
			PORTC&=~(1<<1);	//Led 1 room 1 is off
  d8:	a9 98       	cbi	0x15, 1	; 21
			break;
  da:	e2 cf       	rjmp	.-60     	; 0xa0 <main+0xa>
		case 'h':
			PORTC&=~(1<<2);		//Led 0 room 2 is off
  dc:	aa 98       	cbi	0x15, 2	; 21
			break;
  de:	e0 cf       	rjmp	.-64     	; 0xa0 <main+0xa>
		case 'i':
			PORTC&=~(1<<3);		//Led 0 room 3 is off
  e0:	ab 98       	cbi	0x15, 3	; 21
			break;
  e2:	de cf       	rjmp	.-68     	; 0xa0 <main+0xa>
		case 'j':
			PORTC|=(1<<4);	//Washing machine is off
  e4:	ac 9a       	sbi	0x15, 4	; 21
			PORTC&=~(1<<5);
  e6:	ad 98       	cbi	0x15, 5	; 21
			PORTC&=~(1<<6);
  e8:	ae 98       	cbi	0x15, 6	; 21
			break;
  ea:	da cf       	rjmp	.-76     	; 0xa0 <main+0xa>

000000ec <__tablejump2__>:
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	05 90       	lpm	r0, Z+
  f2:	f4 91       	lpm	r31, Z
  f4:	e0 2d       	mov	r30, r0
  f6:	09 94       	ijmp

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
